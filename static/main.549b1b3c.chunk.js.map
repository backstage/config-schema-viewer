{"version":3,"sources":["webpack:///./src/apis/FragmentSchemaSource.ts","webpack:///./src/apis/apis.ts","webpack:///./src/App.tsx","webpack:///./src/index.tsx"],"names":["prototype","__init","call","this","schema$","subscriber","hash","location","next","schema","undefined","startsWith","error","Error","schemaJson","slice","length","decodeURIComponent","JSON","parse","apis","api","deps","factory","app","plugins","Object","values","AppProvider","getProvider","AppRouter","getRouter","createElement","path","element","render","document","getElementById"],"mappings":"8PAGO,MAAM,EAAuB,cAAgB,EAAqBA,UAAUC,OAAOC,KAAKC,MAC7F,SAAUA,KAAKC,QAAU,IAChB,IAAI,IAAeC,IACxB,MAAM,KAAEC,GAASC,SACjB,IAAKD,EAEH,YADAD,EAAWG,KAAK,CAAEC,YAAQC,IAG5B,IAAKJ,EAAKK,WAAW,YAEnB,YADAN,EAAWO,MAAM,IAAIC,MAAM,6CAG7B,IAAIC,EAAaR,EAAKS,MAAM,WAAWC,QAClCF,EAAWH,WAAW,OACzBG,EAAaG,mBAAmBH,IAGlC,IACE,MAAML,EAASS,KAAKC,MAAML,GAC1BT,EAAWG,KAAK,CAAEC,WAClB,MAAOG,GACPP,EAAWO,MACT,IAAIC,MAAM,yCAAyCD,QCrBtD,MAAMQ,EAAO,CAClB,YAAiB,CACfC,IAAK,IACLC,KAAM,GACNC,QAAS,IAAM,IAAI,KCDjBC,EAAM,YAAU,CACpBJ,OACAK,QAASC,OAAOC,OAAO,KAGnBC,EAAcJ,EAAIK,cAClBC,EAAYN,EAAIO,YAaP,MAXH,IACV,IAAMC,cAAcJ,EAAa,KAC7B,IAAMI,cAAc,IAAc,MAClC,IAAMA,cAAcF,EAAW,KAC7B,IAAME,cAAc,IAAY,KAC9B,IAAMA,cAAc,IAAO,CAAEC,KAAM,IAAKC,QAAS,IAAMF,cAAc,IAAkB,WCfjG,IAASG,OAAO,IAAMH,cAAc,EAAK,MAAQI,SAASC,eAAe,U","file":"static/main.549b1b3c.chunk.js","sourcesContent":["\nimport ObservableImpl from 'zen-observable';\n\nexport class FragmentSchemaSource  {constructor() { FragmentSchemaSource.prototype.__init.call(this); }\n  __init() {this.schema$ = () => {\n    return new ObservableImpl(subscriber => {\n      const { hash } = location;\n      if (!hash) {\n        subscriber.next({ schema: undefined });\n        return;\n      }\n      if (!hash.startsWith('#schema=')) {\n        subscriber.error(new Error('Configuration schema fragment is invalid'));\n        return;\n      }\n      let schemaJson = hash.slice('#schema='.length);\n      if (!schemaJson.startsWith('{')) {\n        schemaJson = decodeURIComponent(schemaJson);\n      }\n\n      try {\n        const schema = JSON.parse(schemaJson);\n        subscriber.next({ schema });\n      } catch (error) {\n        subscriber.error(\n          new Error(`Failed to parse configuration schema, ${error}`),\n        );\n      }\n    });\n  }}\n}\n","import { createApiFactory } from '@backstage/core';\nimport { configSchemaApiRef } from '@backstage/plugin-config-schema';\nimport { FragmentSchemaSource } from './FragmentSchemaSource';\n\nexport const apis = [\n  createApiFactory({\n    api: configSchemaApiRef,\n    deps: {},\n    factory: () => new FragmentSchemaSource(),\n  }),\n];\n","import { AlertDisplay, createApp, FlatRoutes } from '@backstage/core';\nimport { ConfigSchemaPage } from '@backstage/plugin-config-schema';\nimport React from 'react';\nimport { Route } from 'react-router';\nimport { apis } from './apis/apis';\nimport * as plugins from './plugins';\n\nconst app = createApp({\n  apis,\n  plugins: Object.values(plugins),\n});\n\nconst AppProvider = app.getProvider();\nconst AppRouter = app.getRouter();\n\nconst App = () => (\n  React.createElement(AppProvider, null\n    , React.createElement(AlertDisplay, null )\n    , React.createElement(AppRouter, null\n      , React.createElement(FlatRoutes, null\n        , React.createElement(Route, { path: \"/\", element: React.createElement(ConfigSchemaPage, null ),} )\n      )\n    )\n  )\n);\n\nexport default App;\n","import '@backstage/cli/asset-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(React.createElement(App, null ), document.getElementById('root'));\n"],"sourceRoot":""}